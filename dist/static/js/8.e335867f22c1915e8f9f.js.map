{"version":3,"sources":["webpack:///src/view/safe/CSRF.vue","webpack:///./src/view/safe/CSRF.vue?3eb7","webpack:///./src/view/safe/CSRF.vue","webpack:///./static/img/CSRF.jpg"],"names":["safe_CSRF","render","this","$createElement","_self","_c","_m","staticRenderFns","_vm","_h","staticStyle","width","margin","_v","attrs","src","__webpack_require__","Component","normalizeComponent","name","ssrContext","__webpack_exports__","module","exports","p"],"mappings":"qGAoDA,ICjDeA,GADEC,OAFjB,WAA0BC,KAAaC,eAAbD,KAAuCE,MAAAC,GAAwB,OAA/DH,KAA+DI,GAAA,IAExEC,iBADjB,WAAoC,IAAAC,EAAAN,KAAaO,EAAAD,EAAAL,eAA0BE,EAAAG,EAAAJ,MAAAC,IAAAI,EAAwB,OAAAJ,EAAA,OAAiBK,aAAaC,MAAA,MAAAC,OAAA,UAA+BP,EAAA,OAAAA,EAAA,MAAAG,EAAAK,GAAA,UAAAL,EAAAK,GAAA,KAAAR,EAAA,KAAAG,EAAAK,GAAA,oPAAAL,EAAAK,GAAA,KAAAR,EAAA,OAAAA,EAAA,MAAAG,EAAAK,GAAA,YAAAL,EAAAK,GAAA,KAAAR,EAAA,OAA6XK,aAAaC,MAAA,QAAeG,OAAQC,IAAMC,EAAQ,WAAiCR,EAAAK,GAAA,KAAAR,EAAA,KAAAG,EAAAK,GAAA,uEAAAL,EAAAK,GAAA,KAAAR,EAAA,MAAAG,EAAAK,GAAA,cAAAL,EAAAK,GAAA,KAAAR,EAAA,MAAAG,EAAAK,GAAA,kBAAAL,EAAAK,GAAA,KAAAR,EAAA,KAAAG,EAAAK,GAAA,kCAAAL,EAAAK,GAAA,KAAAR,EAAA,KAAAA,EAAA,KAAAG,EAAAK,GAAA,SAAAR,EAAA,MAAAG,EAAAK,GAAA,KAAAR,EAAA,KAAAG,EAAAK,GAAA,aAAAL,EAAAK,GAAA,kFAAAR,EAAA,MAAAG,EAAAK,GAAA,KAAAR,EAAA,KAAAG,EAAAK,GAAA,aAAAL,EAAAK,GAAA,wFAAAR,EAAA,MAAAG,EAAAK,GAAA,KAAAR,EAAA,KAAAG,EAAAK,GAAA,UAAAL,EAAAK,GAAA,mCAAAR,EAAA,MAAAG,EAAAK,GAAA,KAAAR,EAAA,KAAAG,EAAAK,GAAA,UAAAL,EAAAK,GAAA,+BAAAR,EAAA,MAAAG,EAAAK,GAAA,KAAAR,EAAA,KAAAG,EAAAK,GAAA,UAAAL,EAAAK,GAAA,8FAAAL,EAAAK,GAAA,KAAAR,EAAA,MAAAG,EAAAK,GAAA,oBAAAL,EAAAK,GAAA,KAAAR,EAAA,KAAAG,EAAAK,GAAA,aAAAL,EAAAK,GAAA,KAAAR,EAAA,OAAAA,EAAA,MAAAG,EAAAK,GAAA,YAAAL,EAAAK,GAAA,2BAAAR,EAAA,MAAAG,EAAAK,GAAA,oBAAAL,EAAAK,GAAA,KAAAR,EAAA,MAAAG,EAAAK,GAAA,wBAAAL,EAAAK,GAAA,KAAAR,EAAA,MAAAG,EAAAK,GAAA,WAAAL,EAAAK,GAAA,KAAAR,EAAA,KAAAG,EAAAK,GAAA,qDAAAL,EAAAK,GAAA,KAAAR,EAAA,MAAAG,EAAAK,GAAA,mBAAAL,EAAAK,GAAA,KAAAR,EAAA,KAAAG,EAAAK,GAAA,mCAAAL,EAAAK,GAAA,KAAAR,EAAA,MAAAG,EAAAK,GAAA,aAAAL,EAAAK,GAAA,KAAAR,EAAA,KAAAG,EAAAK,GAAA,sHAAAR,EAAA,MAAAG,EAAAK,GAAA,6BAAAL,EAAAK,GAAA,KAAAR,EAAA,MAAAG,EAAAK,GAAA,0BAAAL,EAAAK,GAAA,KAAAR,EAAA,KAAAG,EAAAK,GAAA,mDAAAR,EAAA,MAAAG,EAAAK,GAAA,wEAAAR,EAAA,MAAAG,EAAAK,GAAA,yCAAAL,EAAAK,GAAA,KAAAR,EAAA,MAAAG,EAAAK,GAAA,sBAAAL,EAAAK,GAAA,KAAAR,EAAA,KAAAG,EAAAK,GAAA,4QCEhnB,IAcAI,EAdyBD,EAAQ,OAcjCE,EFoCAC,KAAA,QElCEnB,GATF,EAVA,SAAAoB,GACEJ,EAAQ,SAaV,kBAEA,MAUeK,EAAA,QAAAJ,EAAiB,mDC1BhCK,EAAAC,QAAiBP,EAAAQ,EAAuB","file":"static/js/8.e335867f22c1915e8f9f.js","sourcesContent":["<template>\n    <div style=\"width: 60%;margin: auto;\">\n      <!--是什么-->\n      <div>\n        <h1>CSRF</h1>\n        <p>CSRF（Cross-site request forgery）跨站请求伪造，也被称为“One Click Attack”或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。尽管听起来像跨站脚本（XSS），但它与XSS非常不同，XSS利用站点内的信任用户，而CSRF则通过伪装成受信任用户的请求来利用受信任的网站。与XSS攻击相比，CSRF攻击往往不大流行（因此对其进行防范的资源也相当稀少）和难以防范，所以被认为比XSS更具危险性。</p>\n      </div>\n      <!--怎么攻击-->\n      <div>\n        <h2>CSRF原理</h2>\n        <img src=\"../../../static/img/CSRF.jpg\" style=\"width: 100%;\"/>\n        <p>一次CSRF攻击，受害者必须依次完毕两个步骤： 登录受信任站点A，并在本地生成Cookie。 在不登出A的情况下，訪问危急站点B。</p>\n        <h2>CSRF攻击类型</h2>\n        <h3>1.GET类型的CSRF</h3>\n        <p>仅仅须要一个HTTP请求。就能够构造一次简单的CSRF。</p>\n        <p><b>样例：</b><br/>\n          <b>银行站点A： </b> 它以GET请求来完毕银行转账的操作，如：http://www.mybank.com/Transfer.php?toBankId=11&money=1000<br/>\n          <b>危急站点B： </b> 它里面有一段HTML的代码例如以下：img src=http://www.mybank.com/Transfer.php?toBankId=11&money=1000<br/>\n          <b>后果： </b> 登录了银行站点A--訪问危急站点B==银行账户少了1000块<br/>\n          <b>原因： </b> 银行站点A违反了HTTP规范，使用GET请求更新资源<br/>\n          <b>原理： </b> 登录了银行站点A--訪问站点B，浏览器会带上站点A的Cookie发出Get请求，去获取资源以GET的方式请求站点A，站点A收到请求后，觉得这是一个合法更新资源操作\n        </p>\n        <h3> 2、POST类型的CSRF</h3>\n        <p>如图解所示</p>\n      </div>\n      <!--如何防御-->\n      <div>\n        <h2>防御CSRF</h2>CSRF攻击问题一般是由服务端解决\n        <h3>尽量使用POST，限制GET</h3>\n        <h3>将cookie设置为HttpOnly</h3>\n        <h3>提交验证码</h3>\n        <p>在表单中添加一个随机的数字或字母验证码。通过强制用户和应用进行交互。来有效地遏制CSRF攻击。</p>\n        <h3>Referer Check</h3>\n        <p>检查假设是非正常页面过来的请求，则极有可能是CSRF攻击。</p>\n        <h3>token验证</h3>\n        <p>\n          在 HTTP 请求中以參数的形式添加一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，假设请求中没有 token 或者 token 内容不对，则觉得可能是 CSRF 攻击而拒绝该请求。<br/>\n          token必须随机\n        </p>\n        <h4>关于web跨域Post使用token思路</h4>\n        <p>\n          移动端登录时，服务端验证表单信息。登录成功，生成token，返回给client<br/>\n          client将token存在localstorage/sessionstorage中，每次提交表单，必须要携带token<br/>\n          服务端获取请求，如果没有token忽略请求\n        </p>\n        <h3>在HTTP头中自己定义属性并验证</h3>\n        <p>这样的方法也是使用 token 并进行验证。这里并非把 token 以參数的形式置于 HTTP 请求之中，而是把它放到 HTTP 头中自己    定义的属性里。通过 XMLHttpRequest 这个类，能够一次性给全部该类请求加上 csrftoken 这个 HTTP 头属性。并把 token 值放入当中。这样攻克了上种方法在请求中添加 token 的不便。同一时候，通过 XMLHttpRequest 请求的地址不会被记录到浏览器的地址栏，也不用操心 token 会透过 Referer 泄露到其它站点中去</p>\n      </div>\n    </div>\n</template>\n\n<script>\nexport default {\n  name: 'CSRF'\n}\n</script>\n\n<style scoped>\np{\n  text-indent:2em;\n}\nh1{\n  color: #007979;\n}\nh2{\n  color: #40FFFF;\n}\nh3{\n  color: #00E3E3;\n}\nh4{\n  color: #00AEAE;\n}\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/view/safe/CSRF.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticStyle:{\"width\":\"60%\",\"margin\":\"auto\"}},[_c('div',[_c('h1',[_vm._v(\"CSRF\")]),_vm._v(\" \"),_c('p',[_vm._v(\"CSRF（Cross-site request forgery）跨站请求伪造，也被称为“One Click Attack”或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。尽管听起来像跨站脚本（XSS），但它与XSS非常不同，XSS利用站点内的信任用户，而CSRF则通过伪装成受信任用户的请求来利用受信任的网站。与XSS攻击相比，CSRF攻击往往不大流行（因此对其进行防范的资源也相当稀少）和难以防范，所以被认为比XSS更具危险性。\")])]),_vm._v(\" \"),_c('div',[_c('h2',[_vm._v(\"CSRF原理\")]),_vm._v(\" \"),_c('img',{staticStyle:{\"width\":\"100%\"},attrs:{\"src\":require(\"../../../static/img/CSRF.jpg\")}}),_vm._v(\" \"),_c('p',[_vm._v(\"一次CSRF攻击，受害者必须依次完毕两个步骤： 登录受信任站点A，并在本地生成Cookie。 在不登出A的情况下，訪问危急站点B。\")]),_vm._v(\" \"),_c('h2',[_vm._v(\"CSRF攻击类型\")]),_vm._v(\" \"),_c('h3',[_vm._v(\"1.GET类型的CSRF\")]),_vm._v(\" \"),_c('p',[_vm._v(\"仅仅须要一个HTTP请求。就能够构造一次简单的CSRF。\")]),_vm._v(\" \"),_c('p',[_c('b',[_vm._v(\"样例：\")]),_c('br'),_vm._v(\" \"),_c('b',[_vm._v(\"银行站点A： \")]),_vm._v(\" 它以GET请求来完毕银行转账的操作，如：http://www.mybank.com/Transfer.php?toBankId=11&money=1000\"),_c('br'),_vm._v(\" \"),_c('b',[_vm._v(\"危急站点B： \")]),_vm._v(\" 它里面有一段HTML的代码例如以下：img src=http://www.mybank.com/Transfer.php?toBankId=11&money=1000\"),_c('br'),_vm._v(\" \"),_c('b',[_vm._v(\"后果： \")]),_vm._v(\" 登录了银行站点A--訪问危急站点B==银行账户少了1000块\"),_c('br'),_vm._v(\" \"),_c('b',[_vm._v(\"原因： \")]),_vm._v(\" 银行站点A违反了HTTP规范，使用GET请求更新资源\"),_c('br'),_vm._v(\" \"),_c('b',[_vm._v(\"原理： \")]),_vm._v(\" 登录了银行站点A--訪问站点B，浏览器会带上站点A的Cookie发出Get请求，去获取资源以GET的方式请求站点A，站点A收到请求后，觉得这是一个合法更新资源操作\\n    \")]),_vm._v(\" \"),_c('h3',[_vm._v(\" 2、POST类型的CSRF\")]),_vm._v(\" \"),_c('p',[_vm._v(\"如图解所示\")])]),_vm._v(\" \"),_c('div',[_c('h2',[_vm._v(\"防御CSRF\")]),_vm._v(\"CSRF攻击问题一般是由服务端解决\\n    \"),_c('h3',[_vm._v(\"尽量使用POST，限制GET\")]),_vm._v(\" \"),_c('h3',[_vm._v(\"将cookie设置为HttpOnly\")]),_vm._v(\" \"),_c('h3',[_vm._v(\"提交验证码\")]),_vm._v(\" \"),_c('p',[_vm._v(\"在表单中添加一个随机的数字或字母验证码。通过强制用户和应用进行交互。来有效地遏制CSRF攻击。\")]),_vm._v(\" \"),_c('h3',[_vm._v(\"Referer Check\")]),_vm._v(\" \"),_c('p',[_vm._v(\"检查假设是非正常页面过来的请求，则极有可能是CSRF攻击。\")]),_vm._v(\" \"),_c('h3',[_vm._v(\"token验证\")]),_vm._v(\" \"),_c('p',[_vm._v(\"\\n      在 HTTP 请求中以參数的形式添加一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，假设请求中没有 token 或者 token 内容不对，则觉得可能是 CSRF 攻击而拒绝该请求。\"),_c('br'),_vm._v(\"\\n      token必须随机\\n    \")]),_vm._v(\" \"),_c('h4',[_vm._v(\"关于web跨域Post使用token思路\")]),_vm._v(\" \"),_c('p',[_vm._v(\"\\n      移动端登录时，服务端验证表单信息。登录成功，生成token，返回给client\"),_c('br'),_vm._v(\"\\n      client将token存在localstorage/sessionstorage中，每次提交表单，必须要携带token\"),_c('br'),_vm._v(\"\\n      服务端获取请求，如果没有token忽略请求\\n    \")]),_vm._v(\" \"),_c('h3',[_vm._v(\"在HTTP头中自己定义属性并验证\")]),_vm._v(\" \"),_c('p',[_vm._v(\"这样的方法也是使用 token 并进行验证。这里并非把 token 以參数的形式置于 HTTP 请求之中，而是把它放到 HTTP 头中自己    定义的属性里。通过 XMLHttpRequest 这个类，能够一次性给全部该类请求加上 csrftoken 这个 HTTP 头属性。并把 token 值放入当中。这样攻克了上种方法在请求中添加 token 的不便。同一时候，通过 XMLHttpRequest 请求的地址不会被记录到浏览器的地址栏，也不用操心 token 会透过 Referer 泄露到其它站点中去\")])])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-d7547bb4\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/view/safe/CSRF.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-d7547bb4\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./CSRF.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./CSRF.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./CSRF.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-d7547bb4\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./CSRF.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-d7547bb4\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/view/safe/CSRF.vue\n// module id = null\n// module chunks = ","module.exports = __webpack_public_path__ + \"static/img/CSRF.f353583.jpg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./static/img/CSRF.jpg\n// module id = yZa2\n// module chunks = 8"],"sourceRoot":""}